generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Status {
  id           Int           @id
  name         String
  reservations Reservation[]
}

model MessageStatus {
  id       Int       @id
  name     String
  messages Message[]
}

model Prefecture {
  id        Int         @id
  regionId  Int
  region    Region      @relation(fields: [regionId], references: [id])
  name      String
  kana      String
  user      User[]
  therapist Therapist[]
}

model Region {
  id          Int          @id
  name        String
  kana        String
  prefectures Prefecture[]
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  mail          String        @unique
  tel String?
  password      String
  imageFileName String?
  zipcode       String?
  prefectureId  Int?
  prefecture    Prefecture?   @relation(fields: [prefectureId], references: [id])
  city          String?
  address       String?
  reservations  Reservation[]
  messages      Message[]
  favorites     Favorite[]
  histories     History[]
}

model Therapist {
  id            Int                 @id @default(autoincrement())
  name          String
  comment       String?
  imageFileName String?
  prefectureId  Int?
  prefecture    Prefecture?         @relation(fields: [prefectureId], references: [id])
  city String?
  workYear Int?
  menus         TherapistsOnMenus[]
  reservations Reservation[]
  messages      Message[]
  favorites     Favorite[]
  History       History[]
}

model Favorite {
  id          Int       @id @default(autoincrement())
  therapistId Int
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  created     DateTime  @default(now())

  @@unique([therapistId, userId])
}

model History {
  id          Int       @id @default(autoincrement())
  therapistId Int
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  created     DateTime  @default(now())

  @@unique([therapistId, userId])
}

model Message {
  id              Int           @id @default(autoincrement())
  therapistId     Int
  therapist       Therapist     @relation(fields: [therapistId], references: [id])
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  message         String
  messageStatusId Int           @default(1)
  messageStatus   MessageStatus @relation(fields: [messageStatusId], references: [id])
  isRead          Boolean       @default(false)
  created         DateTime      @default(now())
}

model Menu {
  id         Int                 @id @default(autoincrement())
  name       String
  therapists TherapistsOnMenus[]
}

model TherapistsOnMenus {
  id            Int           @id @default(autoincrement())
  therapist     Therapist?    @relation(fields: [therapistId], references: [id])
  therapistId   Int?
  menu          Menu?         @relation(fields: [menuId], references: [id])
  menuId        Int?
  treatmentTime Int?
  price         Int?
  reservations  Reservation[]

  @@unique([therapistId, menuId])
}

model Reservation {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  therapistId Int
  therapist Therapist @relation(fields: [therapistId], references: [id])
  therapistMenu   TherapistsOnMenus @relation(fields: [therapistMenuId], references: [id])
  therapistMenuId Int
  startDt         DateTime          @default(now())
  created         DateTime          @default(now())
  replyDt DateTime?
  review          Review?
  statusId        Int               @default(1)
  status          Status            @relation(fields: [statusId], references: [id])
}


model Review {
  id            Int         @id @default(autoincrement())
  reservationId Int         @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  rate          Int         @default(5)
  comment       String?
  created       DateTime    @default(now())
}
